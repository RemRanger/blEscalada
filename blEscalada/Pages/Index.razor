@page "/"
@inject HttpClient Http;

<h1>Home</h1>

@if (attempts == null)
{
    <WaitLoading />
}
else
{
    <table class="grid">
        <tbody>
            @foreach (AttemptGroup attemptGroup in attempts.GroupBy(a => new { a.SessionId, a.UserId }).Select(g => new AttemptGroup
            {
                SessionId = g.Key.SessionId,
                UserId = g.Key.UserId,
                Attempts = g.ToList()
            }))
            {
                <tr style="background-color: rgba(0, 0, 0, 0.2)">
                    <td colSpan="100">@attemptGroup.Attempts[0].SessionDate.ToString("ddd dd-MMM-yyyy"), @attemptGroup.Attempts[0].LocationName</td>
                </tr>
                <tr style="background-color: rgba(0, 0, 0, 0.1)">
                    <td colSpan="100">
                        Climber:
                        @*{this.props.userId === g.userId ? <Link to={`/sessions/${g.sessionId}`}>{g.attempts[0].userFirstName} {g.attempts[0].userLastName}</Link> :*@
                        @attemptGroup.Attempts[0].UserFirstName @attemptGroup.Attempts[0].UserLastName
                    </td>
                </tr>

                <tr>
                    <th colSpan="2">Route</th>
                    <th align="left">Type</th>
                    <th align="left">Rating</th>
                    <th align="left">Location</th>
                    <th><img src="images/result-finish.png" alt="" /></th>
                </tr>
                @foreach (Attempt attempt in attemptGroup.Attempts)
                {
                    <tr>
                        <td width="16" style="background-color: @attempt.RouteColor"></td>
                        <td width="300" nowrap>@attempt.RouteName</td>
                        <td width="100" nowrap>@attempt.RouteType</td>
                        <td width="60" nowrap>@attempt.RouteRating</td>
                        <td width="200">@attempt.RouteSublocation</td>
                        @if (attempt.Result == 0 && (attempt.Percentage ?? 0) != 0)
                        {
                            <td width="40" nowrap style="color: red">@(attempt.Percentage ?? 0)%</td>
                        }
                        else
                        {
                            <td width="40" nowrap align="center">
                                @if (Utils.GetResultPic(attempt.Result) != null)
                                {<img src="@Utils.GetResultPic(attempt.Result)" alt="" />}
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
}
<p><a href=@GetApiUrl()>API</a></p>

@functions
{
    Attempt[] attempts;

    public string GetApiUrl() => Utils.GetApiUrl("attempt", ApiKind.read);

    protected override async Task OnInitAsync()
    {
        attempts = await Http.GetJsonAsync<Attempt[]>(GetApiUrl());
    }

    public class Attempt
    {
        public long Id { get; set; }
        public int? Result { get; set; }
        public decimal? Percentage { get; set; }
        public string Comment { get; set; }
        public long RouteId { get; set; }
        public object RouteColor { get; set; }
        public object RouteName { get; set; }
        public object RouteType { get; set; }
        public object RouteRating { get; set; }
        public object RouteSublocation { get; set; }
        public DateTime? RouteDateUntil { get; set; }
        public object RoutePictureFileName { get; set; }
        public long LocationId { get; set; }
        public object LocationName { get; set; }
        public long SessionId { get; set; }
        public DateTime SessionDate { get; set; }
        public long UserId { get; set; }
        public object UserFirstName { get; set; }
        public object UserLastName { get; set; }
    }

    public class AttemptGroup
    {
        public long SessionId { get; set; }
        public long UserId { get; set; }
        public List<Attempt> Attempts { get; set; }
    }
}
